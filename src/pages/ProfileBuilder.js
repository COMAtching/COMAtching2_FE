import React, { Fragment, useEffect, useRef, useState } from "react";
import "../css/pages/ProfileBuilder.css";
import HeaderNav from "../components/HeaderNav";
import Footer from "../components/Footer";
import { TypeAnimation } from "react-type-animation";
import MBTIMaker from "../components/MBTIMaker";
import { useRecoilState } from "recoil";
import { selectedMBTIState, userState } from "../Atoms";
import { useNavigate } from "react-router-dom";
import AgeMaker from "../components/AgeMaker";

const ProfileBuilder = () => {
  const navigate = useNavigate();
  const [selectedMBTI, setSelectedMBTI] = useRecoilState(selectedMBTIState); // ÏÑ†ÌÉùÌïú MBTI Ï†ÄÏû•
  const [currentUserState, setCurrentUserState] = useRecoilState(userState); // ÏÑ†ÌÉùÌïú Ï†ïÎ≥¥ Ï†ÄÏû•
  // ÏßàÎ¨∏ Î≥¥Ïó¨Ï§¨ÎäîÏßÄ, ÎåÄÎãµÏù¥ Î≥¥Ïó¨Ï°åÎäîÏßÄ ÏÉÅÌÉú ÌôïÏù∏
  const [showQuestions, setShowQuestions] = useState([
    [false, false],
    [false, false],
    [false, false],
    [false, false],
    [false, false],
  ]);
  // ÏßàÎ¨∏ Î¶¨Ïä§Ìä∏
  const questions = [
    "Q1. ÏïΩÏÜçÏù¥ Ï∑®ÏÜåÎêòÏóàÏùÑ Îïå",
    "Q2. 1Î∂Ñ ÎèôÏïà ÏïÑÎ¨¥ ÏÉùÍ∞Å ÌïòÏßÄÎßà!",
    "Q3. ÎÇò ÎÑòÏñ¥Ï°åÏñ¥ ÏïÑÌåå üò≠",
    "Q4. Ïó¨Ìñâ Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∏ Îïå",
    "Q5. ÏñºÎßàÎÇò ÏûêÏ£º Ïó∞ÎùΩÌïòÏãúÎÇòÏöî?",
  ];

  // Î≥¥Ïó¨Ïßà ÏßàÎ¨∏ ÏÑ†ÌÉùÏßÄÎì§
  // 1~4Îäî ÏßàÎ¨∏1, ÏßàÎ¨∏2, ÏïûÏóê Î≥¥Ïùº MBTI1, ÏïûÏóê Î≥¥Ïùº MBTI2, MBTI Ïπ¥ÌÖåÍ≥†Î¶¨
  // Ïó∞ÎùΩÏùÄ Í∑∏ÎÉ• ÏßàÎ¨∏1, ÏßàÎ¨∏2, ÏßàÎ¨∏3
  const [showMbtiAnswers, setShowMbtiAnswers] = useState([
    ["Îã§Î•∏ ÏπúÍµ¨Îì§Í≥º ÎÜÄÎü¨ Í∞àÍπå?", "ÌòºÏûê ÏßëÏóêÏÑú Ïâ¨Îäî Í≤å ÏµúÍ≥†Ïïº.", "E", "I", "EI"],
    ["Î¨¥ÌïúÌïú Í≥µÍ∞ÑÏùÑ ÏÉùÍ∞ÅÌïúÎã§", "ÏßÑÏßú ÏïÑÎ¨¥ ÏÉùÍ∞Å ÏïàÌïúÎã§", "N", "S", "SN"],
    ["ÎßéÏù¥ Îã§Ï≥§Ïñ¥?", "Î≥ëÏõê Í∞ÄÎ¥§Ïñ¥?", "F", "T", "TF"],
    ["Í≥ÑÌöçÏóê ÏàòÍ∏çÌï†Í≤å.", "Ï∞æÏïÑÎ≥¥Í≥† Ï†úÏïàÌï¥Î¥êÏïºÏßÄ.", "P", "J", "PJ"],
    [
      "ÎÇòÎäî Ïó∞ÎùΩÏùÑ ÏûêÏ£ºÌï¥",
      "ÎÇòÎäî Ïó∞ÎùΩÏùÑ ÌèâÍ∑†Ï†ÅÏúºÎ°ú Ìï¥",
      "ÎÇòÎäî Ïó∞ÎùΩÏùÑ ÏûêÏ£º ÏïàÌï¥",
      "",
      "",
    ],
  ]);
  const [chooseAnswer, setChooseAnswer] = useState(null); // Ïñ¥Îñ§ ÏÑ†ÌÉùÏßÄÎ•º Í≥®ÎûêÎäîÏßÄ Ï†ÄÏû•
  const [questionNum, setQuestionNum] = useState(0); // ÌòÑÏû¨ Î™áÎ≤àÏß∏ ÏßàÎ¨∏Ïù∏ÏßÄ Ï†ÄÏû•
  const [showAnswerBox, setShowAnswerBox] = useState(false); // ÏßàÎ¨∏ ÌÉÄÏù¥ÌïëÏù¥ ÎÅùÎÇòÎ©¥ ÏÑ†ÌÉùÏßÄÍ∞Ä ÎÇòÏò§ÎèÑÎ°ù ÏÉÅÌÉú Ï†ÄÏû•

  // Ï£ºÏñ¥ÏßÑ Ïù∏Îç±Ïä§Ïùò ÏßàÎ¨∏ÏùÑ ÌëúÏãú
  const handleShowQuestion = (index) => {
    setShowQuestions((prevShowQuestions) => {
      const updatedQuestions = [...prevShowQuestions];
      updatedQuestions[index][0] = true;
      return updatedQuestions;
    });
    setQuestionNum(index);
  };

  // Ï£ºÏñ¥ÏßÑ Ïù∏Îç±Ïä§Ïùò ÏßàÎ¨∏ÏùÑ ÏôÑÎ£åÎ°ú ÌëúÏãú
  const handleQuestionComplete = (index) => {
    setShowQuestions((prevShowQuestions) => {
      const updatedQuestions = [...prevShowQuestions];
      updatedQuestions[index][1] = true;
      return updatedQuestions;
    });
  };
  const chatMessageRef = useRef(null);

  // ÏÉàÎ°úÏö¥ ÏßàÎ¨∏Ïù¥ ÎÇòÌÉÄÎÇ† ÎïåÎßàÎã§ Ï±ÑÌåÖÏ∞ΩÏùÑ Îß® ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§
  useEffect(() => {
    if (chatMessageRef.current) {
      chatMessageRef.current.scrollTop = chatMessageRef.current.scrollHeight;
    }
  }, [showQuestions]);

  // MBTIÎ•º Ï†ÄÏû•Ìïú ÌõÑ Ï∑®ÎØ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  const navigatehobby = () => {
    setCurrentUserState((prev) => ({
      ...prev,
      mbti: `${selectedMBTI.EI}${selectedMBTI.SN}${selectedMBTI.TF}${selectedMBTI.PJ}`,
    }));
    navigate("/hobby");
  };
  return (
    <div className="container">
      <HeaderNav />
      <div className="chat-message" ref={chatMessageRef}>
        <div className="ProfileBuilder">
          <TypeAnimation
            sequence={[
              "Î∞òÍ∞ÄÏõåÏöî! Comatching AIÍ∞Ä Îß§Ïπ≠ ÏÉÅÎåÄÎ•º Ï∞æÍ∏∞ ÏúÑÌïú Î™áÍ∞ÄÏßÄ Í∞ÑÎã®Ìïú ÏßàÏùòÏùëÎãµÏùÑ ÏßÑÌñâÌïòÍ≤†ÏäµÎãàÎã§. üòä",
              1000,
              () => handleShowQuestion(0),
            ]}
            speed={85}
            className="typing-animation"
            cursor={false}
          />
        </div>

        {showQuestions[0][0] && (
          <Fragment>
            <div className="ProfileBuilder">
              <TypeAnimation
                sequence={[questions[0], 1000, () => setShowAnswerBox(true)]}
                speed={85}
                className="typing-animation"
                cursor={false}
              />
            </div>
            {showQuestions[0][1] && (
              <div className="ProfileBuilder-answer">
                <TypeAnimation
                  sequence={[
                    showMbtiAnswers[0][chooseAnswer],
                    1000,
                    () => setShowAnswerBox(false),
                    () => handleShowQuestion(1),
                  ]}
                  speed={85}
                  className="typing-animation"
                  cursor={false}
                />
              </div>
            )}
          </Fragment>
        )}
        {showQuestions[1][0] && (
          <Fragment>
            <div className="ProfileBuilder">
              <TypeAnimation
                sequence={[questions[1], 1000, () => setShowAnswerBox(true)]}
                speed={85}
                className="typing-animation"
                cursor={false}
              />
            </div>
            {showQuestions[1][1] && (
              <div className="ProfileBuilder-answer">
                <TypeAnimation
                  sequence={[
                    showMbtiAnswers[1][chooseAnswer],
                    1000,
                    () => setShowAnswerBox(false),
                    () => handleShowQuestion(2),
                  ]}
                  speed={85}
                  className="typing-animation"
                  cursor={false}
                />
              </div>
            )}
          </Fragment>
        )}
        {showQuestions[2][0] && (
          <Fragment>
            <div className="ProfileBuilder">
              <TypeAnimation
                sequence={[questions[2], 1000, () => setShowAnswerBox(true)]}
                speed={85}
                className="typing-animation"
                cursor={false}
              />
            </div>
            {showQuestions[2][1] && (
              <div className="ProfileBuilder-answer">
                <TypeAnimation
                  sequence={[
                    showMbtiAnswers[2][chooseAnswer],
                    1000,
                    () => setShowAnswerBox(false),
                    () => handleShowQuestion(3),
                  ]}
                  speed={85}
                  className="typing-animation "
                  cursor={false}
                />
              </div>
            )}
          </Fragment>
        )}
        {showQuestions[3][0] && (
          <Fragment>
            <div className="ProfileBuilder">
              <TypeAnimation
                sequence={[questions[3], 1000, () => setShowAnswerBox(true)]}
                speed={85}
                className="typing-animation"
                cursor={false}
              />
            </div>
            {showQuestions[3][1] && (
              <div className="ProfileBuilder-answer">
                <TypeAnimation
                  sequence={[
                    showMbtiAnswers[3][chooseAnswer],
                    1000,
                    () => setShowAnswerBox(false),
                    () => handleShowQuestion(4),
                  ]}
                  speed={85}
                  className="typing-animation"
                  cursor={false}
                />
              </div>
            )}
          </Fragment>
        )}
        {showQuestions[4][0] && (
          <Fragment>
            <div className="ProfileBuilder">
              <TypeAnimation
                sequence={[questions[4], 1000, () => setShowAnswerBox(true)]}
                speed={85}
                className="typing-animation"
                cursor={false}
              />
            </div>
            {showQuestions[4][1] && (
              <div className="ProfileBuilder-answer">
                <TypeAnimation
                  sequence={[
                    showMbtiAnswers[4][chooseAnswer],
                    1000,
                    () => setShowAnswerBox(false),
                    () => navigatehobby(),
                  ]}
                  speed={85}
                  className="typing-animation"
                  cursor={false}
                />
              </div>
            )}
          </Fragment>
        )}
      </div>
      <div className="Answer-box">
        {showAnswerBox &&
          {
            /* 4 Ïù¥ÌïòÎ©¥ mbti ÏïÑÎãàÎ©¥ Ïó∞ÎùΩ ÎπàÎèÑ */
          }(
            questionNum < 4 ? (
              <MBTIMaker
                mbtiAnswers={showMbtiAnswers}
                questionNum={questionNum}
                handleQuestionComplete={handleQuestionComplete}
                setSelectedMBTI={setSelectedMBTI}
                setChooseAnswer={setChooseAnswer}
              />
            ) : (
              <AgeMaker
                handleQuestionComplete={handleQuestionComplete}
                setCurrentUserState={setCurrentUserState}
                currentUserState={currentUserState}
                setChooseAnswer={setChooseAnswer}
              />
            )
          )}
      </div>
      <Footer />
    </div>
  );
};

export default ProfileBuilder;
